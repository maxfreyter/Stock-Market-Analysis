-- Checking for date ranges and # of records
SELECT MIN(date) AS min_date,
       MAX(date) AS max_date,
       COUNT(*) AS record_count
FROM portfolio-project-430215.Stock_Prices.stock_prices 

--RESULT:	
min_date: 2014-01-02
max_date: 2017-12-29
record_count:	497472


-- Checking for missing values
SELECT *
FROM portfolio-project-430215.Stock_Prices.stock_prices
WHERE symbol IS NULL
  SELECT *
  FROM portfolio-project-430215.Stock_Prices.stock_prices WHERE `date` IS NULL
  SELECT *
  FROM portfolio-project-430215.Stock_Prices.stock_prices WHERE OPEN IS NULL
  SELECT *
  FROM portfolio-project-430215.Stock_Prices.stock_prices WHERE high IS NULL
  SELECT *
  FROM portfolio-project-430215.Stock_Prices.stock_prices WHERE low IS NULL
  SELECT *
  FROM portfolio-project-430215.Stock_Prices.stock_prices WHERE CLOSE IS NULL
  SELECT *
  FROM portfolio-project-430215.Stock_Prices.stock_prices WHERE volume IS NULL 

--RESULT: No missing values found.


-- Checking for duplicates. Combine the symbol and date to get unique results.
SELECT symbol, date, COUNT(*) AS cnt
FROM portfolio-project-430215.Stock_Prices.stock_prices
GROUP BY symbol, date
HAVING cnt > 1
ORDER BY cnt DESC 

--RESULT: No duplicates found.

-- Which date in the sample saw the largest overall trading volume?
SELECT date, SUM(volume) AS total_volume
FROM portfolio-project-430215.Stock_Prices.stock_prices
GROUP BY date
ORDER BY total_volume DESC
LIMIT 1;

--RESULT: Row	
date: 2015-08-24
total_volume: 4607945196


-- On that date, which two stocks were traded most?
 WITH max_volume_date AS
  (SELECT date, SUM(volume) AS total_volume
   FROM portfolio-project-430215.Stock_Prices.stock_prices
   GROUP BY date
   ORDER BY total_volume DESC
   LIMIT 1)
SELECT symbol,
       volume
FROM portfolio-project-430215.Stock_Prices.stock_prices
WHERE date =
    (SELECT date
     FROM max_volume_date)
ORDER BY volume DESC
LIMIT 2;

--RESULT: 	
1. BAC: 214649482
2. AAPL: 162206292


-- On which day of the week does volume tend to be highest? Lowest?
SELECT EXTRACT(DAYOFWEEK
               FROM date) AS day_of_week,
       AVG(volume) AS avg_volume
FROM portfolio-project-430215.Stock_Prices.stock_prices
WHERE volume > 0
GROUP BY day_of_week
ORDER BY avg_volume DESC;

--RESULT:
1.	
Friday
4435826.476735156
2.	
Thursday
4299347.1097871149
3.	
Wednesday
4298572.4201132376
4.	
Tuesday
4188771.0636289748
5.	
Monday
4031171.7639856697


-- On which date did Amazon (AMZN) see the most volatility, measured by the difference between the high and low price?
SELECT date, symbol,
             (high - low) AS daily_volatility
FROM portfolio-project-430215.Stock_Prices.stock_prices
WHERE symbol = 'AMZN'
ORDER BY daily_volatility DESC
LIMIT 1;

--RESULT: 	
date: 2017-06-09
daily_volatility: 85.99

--Which stocks had the highest cumulative return?
 WITH DailyReturns AS
  (SELECT symbol, date, CLOSE,
                        LAG(CLOSE) OVER (PARTITION BY symbol
                                         ORDER BY date) AS previous_close,
                        SAFE_DIVIDE(CLOSE, LAG(CLOSE) OVER (PARTITION BY symbol
                                                            ORDER BY date)) - 1 AS daily_return
   FROM portfolio-project-430215.Stock_Prices.stock_prices),
      CumulativeReturns AS
  (SELECT symbol, date, CLOSE,
                        EXP(SUM(LN(1 + daily_return)) OVER (PARTITION BY symbol
                                                            ORDER BY date)) - 1 AS cumulative_return
   FROM DailyReturns)
SELECT symbol, date, cumulative_return
FROM CumulativeReturns
ORDER BY symbol, date;

WITH CumulativeReturns AS
  (WITH DailyReturns AS
     (SELECT symbol, date, CLOSE,
                           LAG(CLOSE) OVER (PARTITION BY symbol
                                            ORDER BY date) AS previous_close,
                           SAFE_DIVIDE(CLOSE, LAG(CLOSE) OVER (PARTITION BY symbol
                                                               ORDER BY date)) - 1 AS daily_return
      FROM portfolio-project-430215.Stock_Prices.stock_prices),
        CumulativeReturns AS
     (SELECT symbol, date, CLOSE,
                           EXP(SUM(LN(1 + daily_return)) OVER (PARTITION BY symbol
                                                               ORDER BY date)) - 1 AS cumulative_return
      FROM DailyReturns) SELECT symbol, date, cumulative_return
   FROM CumulativeReturns
   ORDER BY symbol, date)
SELECT symbol,
       MAX(cumulative_return) AS final_cumulative_return
FROM CumulativeReturns
GROUP BY symbol
ORDER BY final_cumulative_return DESC
LIMIT 5;

--RESULT:
1.
NVDA
12.679697351828512
2.	
AVGO
4.405887939221274
3.	
EA
4.342531756460807
4.	
ALGN
3.6388693820224756
5.	
SWKS
3.2456204379562044

